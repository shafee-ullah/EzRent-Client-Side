---
alwaysApply: true
---
- Always follow the following design document whenever you are making any change or updating any feature.

Take a whole look at the code structure of frontend and server side. 

I want to build a guest ↔ host chat system that works in real time using Socket.io and Redux.
Please give me a complete setup covering both backend and frontend.

My MongoDB users collection stores data like this:

{
  _id: ObjectId("68e9b4260b78f525ff8c1b36"),
  name: "A K M Shafee Ullah",
  email: "shafeeullah.412@gmail.com",
  role: "guest"
},
{
  _id: ObjectId("68e9b4b18beac499d42b65ac"),
  name: "John Cena",
  email: "johncena@gmail.com",
  role: "host"
}

Include the following details:

1.Folder structure for backend and frontend (chat system integrated with existing booking app).

2.MongoDB collection design using native driver (not Mongoose):

-users

-conversations

-messages
With sample documents for each.

3.Backend Express.js routes (using native driver) for:

-Creating a new conversation

-Fetching all conversations for a user

-Sending a message

-Fetching all messages of a conversation

4.Socket.io integration for real-time message updates:

-How to initialize the socket server in server.js

-How to join chat rooms using conversationId

-How to emit and listen for new messages

5.Frontend React setup with Redux Toolkit:

-chatSlice.js for managing conversations and messages in Redux

-Using socket.io-client for connecting to the backend

-React components for:

-Chat list (show all conversations)

-Chat window (messages + input field)

-“Message Host” button (creates or opens a conversation)

6.Integration with existing booking flow:

-When a guest clicks “Contact Host” on My Bookings on Guest Dashboard:

-Check if a conversation between guest and host exists → open it

-If not → create a new conversation and open chat modal/page

-After Creating the Conversation guest can message directly from  Messages option in the guest dashboard and host can see the message in the Messages option in host dashboard

7.Add typing indicators and online/offline status tracking with Socket.io events 

Please use async/await, modular Express routes, and Redux best practices.
Make sure the entire setup works with native MongoDB driver, not Mongoose.The code must be clean, modular, and include proper comments for easy understanding.Use proper routing.
